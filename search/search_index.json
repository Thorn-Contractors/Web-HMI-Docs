{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Web HMI","text":"<p>This is the developer documentation for the \"Thorn Contractors Web HMI\".</p> <p>Here you can find information regarding:</p> <ul> <li>The architecture of the HMI - Basic Architecture.</li> <li>How to set up your development environment - Getting Started.</li> <li>Using existing templates and build your own - Client Overview</li> <li>Interfacing with other software &amp; devices. - Server Overview</li> </ul>"},{"location":"#_1","title":"Welcome","text":"<p>Finding information</p> <p>Use the tabs on the left or use the search bar at the top left of the page to search within this documentation.</p>"},{"location":"architecture/","title":"How it works","text":"<p>The HMI is built on the idea of a client-server model using sockets. Not only does this method help to naturally enforce positive compartmentalisation of code but also can allow for extended functionality like: </p> <ul> <li>Multiple clients to be connected to a single server</li> <li>Live development of HMIs</li> <li>Remote servers to reduce load on the IPC/CX</li> </ul>"},{"location":"architecture/#the-server","title":"The Server","text":"<p>The server manages the reading and writing of data to the different sources that communicate with the HMI.</p> <p>It complies this information in to JSON and serves it to the client via a socket server which enables live updates between server, client, and PLC.</p> <p>Info</p> <p>The base functionality of the PLC connection has been implemented and included as part of the HMI under the library \"ADS Core\". To find out more about this library please head to ADS Core</p>"},{"location":"architecture/#the-client","title":"The Client","text":"<p>The client is based on web technologies and is written in CSS, HTML, and JS. It formats the data received from the server in to a user friendly interface which is displayed via a lightweight web browser on the panel.</p> <p>The main framework used for layout is Vuetify. This works alongside Vue.js to create a reactive and easy to use layout system.</p>"},{"location":"architecture/#diagram","title":"Diagram","text":""},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"client/components/input_box/","title":"Input Boxes","text":"<pre><code># HmiInputBox Component\n\nThe built-in HmiInputBox Vue component provides a customizable input box that supports different use cases including string and numeric inputs.\n\nYou can use this component in your Vue template as follows:\n\n```html\n&lt;hmi-input-box/&gt;\n</code></pre> <p>Below are the prop details:</p> Prop Description Required Default <code>inputType</code> The type of input to accept \u2705 <code>\"text\"</code> <code>variable</code> The Vue.js variable name \u274c <code>\"\"</code> <code>plcSymbol</code> The PLC symbol address \u274c <code>\"\"</code> <code>bounds</code> Bounds for numeric input \u274c <code>undefined</code> <code>decimalPlaces</code> Number of decimal places for the numeric input \u274c <code>undefined</code>"},{"location":"client/components/input_box/#supported-input-types","title":"Supported input types","text":""},{"location":"client/components/input_box/#vue-strings","title":"Vue Strings","text":"<p>To edit JavaScript strings within the Vue.js app object, use the prop <code>inputType</code> with value <code>\"text\"</code> and provide the variable that you want to access.</p> <p>Vue Strings Example</p> HTMLJs <pre><code>&lt;hmi-input-box\ninput-type=\"text\"\nvariable=\"exampleString\"\n/&gt;\n</code></pre> <pre><code>var hmi_data = {\ndata: {\nexample_string: \"Hello, world\"\n}\n}\n</code></pre>"},{"location":"client/components/input_box/#vue-numeric","title":"Vue Numeric","text":"<p>To edit JavaScript numerical values within the Vue.js app object, use the prop <code>inputType</code> with value <code>\"numeric\"</code> and provide the variable that you want to access.</p> <p>Vue Numeric Example</p> HTMLJs <pre><code>&lt;hmi-input-box\ninput-type=\"numeric\"\nvariable=\"exampleNumeric\"\n/&gt;\n</code></pre> <pre><code>var hmi_data = {\ndata: {\nexampleNumeric: 12.3\n}\n}\n</code></pre> <p>If the value that you are editing needs to stay within bounds, add the <code>bounds</code> prop with the values that you require.</p> <p>Vue Numeric Bounds Example</p> HTMLJs <pre><code>&lt;hmi-input-box\ninput-type=\"numeric\"\nvariable=\"exampleNumeric\"\n:bounds=\"[0, 20]\"\n/&gt;\n</code></pre> <pre><code>var hmi_data = {\ndata: {\nexampleNumeric: 11\n}\n}\n</code></pre>"},{"location":"client/components/input_box/#plc-strings","title":"PLC Strings","text":"<p>To handle PLC strings, use the prop <code>inputType</code> with value <code>\"PLC_text\"</code> and provide the symbol that you want to access.</p> <p>PLC Strings Example</p> HTML <pre><code>&lt;hmi-input-box\ninput-type=\"PLC_text\"\nplcSymbol=\"GVL_HMI.G_HMI.Q.sExampleString\"\n/&gt;\n</code></pre>"},{"location":"client/components/input_box/#plc-numeric","title":"PLC Numeric","text":"<p>To handle numeric values from a PLC, use the prop <code>inputType</code> with value <code>\"PLC_numeric\"</code>. This supports all PLC numeric types, such as: <code>REAL</code>, <code>UINT</code>, <code>INT</code>, etc.</p> <p>PLC Numeric Example</p> HTML <pre><code>&lt;hmi-input-box\ninput-type=\"PLC_numeric\"\nplcSymbol=\"GVL_HMI.G_HMI.Q.nExampleInt\"\n/&gt;\n</code></pre> <p>If the value that you are editing needs to stay within bounds, add the <code>bounds</code> prop with the values that you require.</p> <p>PLC Numeric Bounds Example</p> HTML <pre><code>&lt;hmi-input-box\ninput-type=\"PLC_numeric\"\nplcSymbol=\"GVL_HMI.G_HMI.Q.nExampleInt\"\n:bounds=\"[0, 20]\"\n/&gt;\n</code></pre>"},{"location":"server/ads_core/","title":"ADS Core","text":"<p>This provides the functionality to read and write variables via ADS quickly by using Dictionaries that can be easily parsed in to JSON for client compatibility. To find out more about this library please head to ADS Core</p>"},{"location":"server/overview/","title":"Server Overview","text":""}]}